"""
Main FastAPI application.

This module contains the FastAPI application and API endpoints.
"""
# Import path_fix first to ensure correct module resolution
import sys
import os
import json
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

import time
import logging
from typing import List, Optional, Dict, Any
from contextlib import asynccontextmanager

from fastapi import FastAPI, Depends, HTTPException, Request, Response, Header
from fastapi.responses import JSONResponse, StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.exceptions import RequestValidationError
from starlette.status import HTTP_401_UNAUTHORIZED

from .models import (
    ChatRequest,
    ChatResponse,
    ChatResponseChoice,
    Message,
    APIInfo,
    HealthCheck
)
from . import auth, cache, litellm_provider as llm_provider, db
from .database import init_db
from .synthlang import is_synthlang_available
from .synthlang.endpoints import router as synthlang_router
from .openai.endpoints import router as openai_router
from .cache.endpoints import router as cache_router
from .agents.endpoints import router as tools_router
from .keywords.endpoints import router as keywords_router
from .models_endpoint import router as models_router
from .config.keywords import initialize_from_config
from .validation_handler import validation_exception_handler
from .json_validation_fix import safe_json_loads


# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger("app")


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Lifespan context manager for the FastAPI application.
    
    This function is called when the application starts up and shuts down.
    It initializes the database and performs other startup/shutdown tasks.
    
    Args:
        app: The FastAPI application instance
    """
    # Startup logic
    logger.info("Initializing application...")
    
    # Check required environment variables
    from .config import OPENAI_API_KEY, DATABASE_URL, ENCRYPTION_KEY
    
    # Verify OpenAI API key is set
    if not OPENAI_API_KEY:
        logger.error("OPENAI_API_KEY environment variable is not set. API calls will fail.")
        logger.error("Please set the OPENAI_API_KEY environment variable in the .env file.")
        # We don't raise an exception here to allow the app to start, but it will fail on API calls
    else:
        logger.info("OPENAI_API_KEY environment variable is set.")
    
    # Initialize the database
    db_initialized = await init_db()
    if db_initialized:
        logger.info("Database initialized successfully")
        
        # Initialize user roles from the database
        logger.info("Initializing user roles from the database...")
        await auth.init_user_roles()
        logger.info("User roles initialized successfully")
        
        # Load API keys from the database
        logger.info("Loading API keys from the database...")
